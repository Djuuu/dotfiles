#!/usr/bin/env bash


if [[ $# -ge 2 ]]; then
  remote="$1"
  branch="$2"
elif [[ $# -eq 1 ]]; then
  if git remote | grep -q "^${1}$"; then
    remote="$1"
    branch=$(git rev-parse --abbrev-ref HEAD)
  else
    branch="$1"
  fi
else
  branch=$(git rev-parse --abbrev-ref HEAD)
fi

if [[ -z $branch ]]; then
  echo "No branch specified"
  exit 1
fi

# Use remote branch is tracking, if any
[[ -z $remote ]] && remote=$(git config --get "branch.${branch}.remote")
# Otherwise, use origin if remote exists
[[ -z $remote ]] && remote=$(git remote | grep -q "^origin$" && echo "origin")
# Fallback to first remote
[[ -z $remote ]] && remote=$(git remote | head -n 1)

if [[ -z $remote ]]; then
  echo "Unable to determine remote"
  exit 1
fi

# Replace arguments
set -- "$remote" "$branch" "${@:3}"

# Try pushing
git push --force-with-lease "$@" || {

    remote_branch=$(git rev-parse --abbrev-ref '@{u}')
    remote=$(echo "$remote_branch" | cut -d/ -f1)
    current_branch=$(git rev-parse --abbrev-ref HEAD)

    git fetch "${remote}" "${current_branch}" 2>/dev/null

    remote_commit=$(git rev-parse --short '@{u}')

    gray='\e[090m'
    lightgreen='\e[92m'
    orange='\e[33m'
    red='\e[31m'
    reset='\e[0m'

    echo
    echo -e "${gray}-----------------------------------------${reset}"
    git context-graph -25
    echo -e "${gray}-----------------------------------------${reset}"
    echo
    echo -e "To acknowledge current ${red}${remote_branch}${reset} revision, use:"
    echo
    echo -e "  git push --force-with-lease=${lightgreen}${current_branch}${reset}:${orange}${remote_commit}${reset}"
    echo
    echo "or just:"
    echo
    echo "  git push --force"
    echo
}
