
[core]

	# checkout as-is ; commit as-is
	autocrlf = false

	eol = lf
	ignorecase = false
	whitespace = -trailing-space

	fscache = true
	editor = vim
	excludesfile = ~/.gitignore.global

[include]
	path = ~/.gitconfig.local

################################################################################

[fetch]
	prune = true # Before fetching, remove any remote-tracking references that no longer exist on the remote.
	recurseSubmodules = true # Recursively fetch submodules

[merge]
	ff = false # Always create a merge commit (never fast-forward)

[pull]
	#rebase = true # Pull with rebase instead of merge
	rebase = merges # also apply --rebase-merges (2.18+)

[push]
	#default = current # Push the current branch to update a branch with the same name on the receiving end
	default = upstream # Push the current branch back to the upstream (tracking) remote branch

[rebase]
	autosquash = true # Automatically squash commits made with --fixup

[rerere]
	enabled = true # Activate recording of resolved conflicts, so that identical conflict hunks can be resolved automatically
	#autoupdate = true

[status]
	#submoduleSummary = true # Shows a summary of commits for modified submodules
	submoduleSummary = 3
	#showUntrackedFiles = all # Show individual files in untracked directories

[tag]
	sort = v:refname # Sort tags as version numbers (ex: 1.2.0 before 1.10.2)

################################################################################

[diff]
	# Prefixes : (i)ndex, (w)ork tree, (c)ommit, (o)bject, (1), (2)
	mnemonicPrefix = true
	# Lists the commits in the range like git-submodule[1] summary does
	submodule = log
	# Shows an inline diff of the changed contents of the submodule
	#submodule = diff
	# Show minimal diff when using --word-diff
	wordRegex = .

[log]
	# Show short one-line commit names
	abbrevCommit = true
	# Continue listing the history of a file beyond renames
	follow = true

[pretty]
	graph = %Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset

################################################################################

[alias]

	# list available aliases
	aliases = !git config --get-regexp alias | sed -re 's/alias\\.(\\S*)\\s(.*)$/\\1 = \\2/g'

	st = "status"

	ss = "stash push -u"
	sp = "stash pop --index"

	ri = "rebase -i"
	rir = "rebase -i -r"
	rc = "rebase --continue"
	ra = "rebase --abort"

	lg = "log --color --graph --pretty=graph --abbrev-commit --"
	lga = "log --color --graph --pretty=graph --abbrev-commit --all --"
	lgr = "!f() { git log --oneline --reverse --no-decorate -n ${1:-25}; }; f"
	ld = "!f() { echo -e `git show --pretty=format:'%Cgreen%ci %Cblue%cr%Creset' $1 | head -n 1`\\\\t$1; }; f"

	sup = "submodule update --init --recursive"

	uncommit = "!f() { echo -n 'Uncommitting: '; git rev-parse --short HEAD; echo; git log -1 --pretty=%B; git reset --soft HEAD~1; }; f"
	prev-commit = "!f() { git reflog | sed -n 2p | cut -d' ' -f1; }; f"
	recommit = "!f() { echo -n 'Resetting to previous commit: '; git prev-commit; git reset --soft $(git prev-commit); }; f"
	amend = "!f() { git commit -m \"$(git log --format=%B -n 1 $(git prev-commit))\" ; }; f"

	fpush = "push --force-with-lease"
	fp = "push --force-with-lease"
	fpu = "!f() { git push --force-with-lease && git mr update; }; f"
	pushall = "!f() { for remote in `git remote`; do git push $remote "$@"; done }; f"
	fpushall = "!f() { for remote in `git remote`; do git push --force-with-lease $remote "$@"; done }; f"

	gca = "gc --aggressive"

	# branches
	branches = for-each-ref --sort=-committerdate --format=\"%(color:blue)%(authordate:relative)\t%(color:red)%(authorname)\t%(color:white)%(color:bold)%(refname:short)\" refs/remotes

	contains = "branch -a --contains"

	# merged / non-merged branches
	mb  = "!f() { git branch -a --merged    ${1:-master} | grep -v '>\\|*' | perl -pe s/^..//; }; f"
	nmb = "!f() { git branch -a --no-merged ${1:-master} | grep -v '>\\|*' | perl -pe s/^..//; }; f"

	# stale merged/non-merged branches
	stmb  = "!f() { for k in `git mb $1`;  do git ld $k; done | sort -r; }; f"
	stnmb = "!f() { for k in `git nmb $1`; do git ld $k; done | sort -r; }; f"

	# transfer all refs from one remote to another
	transfer-remote = "!f() { [ ! -z \"$1\" ] && [ ! -z \"$2\" ] && git push $2 +refs/remotes/$1/*:refs/heads/* +refs/tags/*:refs/tags/* ; }; f"

	# remote non-origin branches
	rnob = "!git branch -a | grep remotes/ | grep -v remotes/origin | sed -e 's/remotes\\///'"

	# remove remote non-origin branches
	rrnob = "!git branch -r -d $(git rnob)"

	# https://tomschlick.com/git-forget/
	# Lists local branches whose corresponding remote branch has been deleted
	gone = ! git branch -vv | awk '/: gone]/{print $1}'
	# Deletes local branches whose corresponding remote branch has been deleted
	forget = ! git fetch -p && [ ! -z \"`git gone`\" ] && (git gone | xargs git branch -D) || echo 'No branch to forget'

	# external commands
	k                = "!gitk --all"
	mu               = "!python ~/.dotfiles/mu-repo/mu"
	deliver          = "!bash ~/.dotfiles/git-deliver/deliver.sh"
	build            = "!bash ~/.dotfiles/git-build/git-build.sh"
	compare-branches = "!bash ~/.dotfiles/git-compare-branches/git-compare-branches.sh"
	mr               = "!bash ~/.dotfiles/git-mr/git-mr"

[gui]
	encoding = utf-8
	tabsize = 4
