#!/usr/bin/env bash

set -e

DOTFILES_BACKUP_DELETE_LOCAL=0

DOTFILES_BACKUP_DIR=".dotfiles.bak.$(date +'%Y%m%d-%H%M')"

dotfiles_backup () {
    local file_name
    for file_name in \
        ".bash_aliases"               \
        ".bash_functions"             \
        ".bash_logout"                \
        ".bash_profile"               \
        ".bashrc"                     \
        ".dotfiles/.bashrc.env.local" \
        ".dotfiles/.bashrc.local"     \
        ".gitconfig"                  \
        ".dotfiles/.gitconfig.local"  \
        ".gitignore.global"           \
        ".minttyrc"                   \
        ".vimrc"                      \
        ".xbindkeysrc"                \
        ".Xmodmap"
    do
        if [ -f "${HOME}/${file_name}" ] && [ ! -L "${HOME}/${file_name}" ]; then
            dotfile_backup "${file_name}"
        fi
    done
}

dotfile_backup () {

    if [ -z "$DOTFILES_BACKUP_DIR" ]; then
        echo "Undefined backup directory"
        exit 1
    fi

    if [ ! -d "${HOME}/${DOTFILES_BACKUP_DIR}" ]; then
        mkdir -p "${HOME}/${DOTFILES_BACKUP_DIR}"
    fi

    local file_name=$*

    if [ -f "${HOME}/${file_name}" ] && [ ! -L "${HOME}/${file_name}" ]; then
        local dest_file_name
        dest_file_name=$(basename "$file_name")
        echo "Backing up ~/${DOTFILES_BACKUP_DIR}/${file_name}"
        cp "${HOME}/${file_name}" "${HOME}/${DOTFILES_BACKUP_DIR}/${dest_file_name}"
    fi

    if [ -f "${HOME}/${DOTFILES_BACKUP_DIR}/${file_name}" ] && [ "$DOTFILES_BACKUP_DELETE_LOCAL" = "1" ]; then
        rm "${HOME}/${file_name}"
    fi
}

# Read command options
while getopts ":-:" opt; do
    case "${OPTARG}" in
        delete)
            DOTFILES_BACKUP_DELETE_LOCAL=1
            ;;
    esac
done

# Run
dotfiles_backup
